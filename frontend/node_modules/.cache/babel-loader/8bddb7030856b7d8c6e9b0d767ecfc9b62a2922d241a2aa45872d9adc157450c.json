{"ast":null,"code":"const BASE_URL = \"https://api.hukakou.nomoredomains.rocks\";\n\n//Регистрация\nfunction register(email, password) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  };\n  return fetch(`${BASE_URL}/signup`, options).then(responseTransformation);\n}\n\n//Вход\nfunction login(email, password) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  };\n  return fetch(`${BASE_URL}/signin`, options).then(responseTransformation);\n}\n\n// Проверка токена\nfunction authorize(token) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return fetch(`${BASE_URL}/users/me`, options).then(responseTransformation);\n}\nfunction responseTransformation(response) {\n  return response.ok ? response.json() : Promise.reject(`${response.status} ${response.statusText}`);\n}\nexport { register, login, authorize };","map":{"version":3,"names":["BASE_URL","register","email","password","options","method","headers","body","JSON","stringify","fetch","then","responseTransformation","login","authorize","token","Authorization","response","ok","json","Promise","reject","status","statusText"],"sources":["C:/Users/Pavel/Desktop/dev/Yandex Practicum/react-mesto-api-full-gha/frontend/src/utils/ApiAuth.js"],"sourcesContent":["const BASE_URL = \"https://api.hukakou.nomoredomains.rocks\";\r\n\r\n//Регистрация\r\nfunction register(email, password) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      email: email,\r\n      password: password,\r\n    }),\r\n  };\r\n  return fetch(`${BASE_URL}/signup`, options).then(responseTransformation);\r\n}\r\n\r\n//Вход\r\nfunction login(email, password) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      email: email,\r\n      password: password,\r\n    }),\r\n  };\r\n  return fetch(`${BASE_URL}/signin`, options).then(responseTransformation);\r\n}\r\n\r\n// Проверка токена\r\nfunction authorize(token) {\r\n  const options = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  return fetch(`${BASE_URL}/users/me`, options).then(responseTransformation);\r\n}\r\n\r\nfunction responseTransformation(response) {\r\n  return response.ok\r\n    ? response.json()\r\n    : Promise.reject(`${response.status} ${response.statusText}`);\r\n}\r\n\r\nexport { register, login, authorize };\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,yCAAyC;;AAE1D;AACA,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACjC,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EACD,OAAOO,KAAK,CAAE,GAAEV,QAAS,SAAQ,EAAEI,OAAO,CAAC,CAACO,IAAI,CAACC,sBAAsB,CAAC;AAC1E;;AAEA;AACA,SAASC,KAAKA,CAACX,KAAK,EAAEC,QAAQ,EAAE;EAC9B,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC;EACD,OAAOO,KAAK,CAAE,GAAEV,QAAS,SAAQ,EAAEI,OAAO,CAAC,CAACO,IAAI,CAACC,sBAAsB,CAAC;AAC1E;;AAEA;AACA,SAASE,SAASA,CAACC,KAAK,EAAE;EACxB,MAAMX,OAAO,GAAG;IACdC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,iCAAiC;MACjDU,aAAa,EAAG,UAASD,KAAM;IACjC;EACF,CAAC;EACD,OAAOL,KAAK,CAAE,GAAEV,QAAS,WAAU,EAAEI,OAAO,CAAC,CAACO,IAAI,CAACC,sBAAsB,CAAC;AAC5E;AAEA,SAASA,sBAAsBA,CAACK,QAAQ,EAAE;EACxC,OAAOA,QAAQ,CAACC,EAAE,GACdD,QAAQ,CAACE,IAAI,EAAE,GACfC,OAAO,CAACC,MAAM,CAAE,GAAEJ,QAAQ,CAACK,MAAO,IAAGL,QAAQ,CAACM,UAAW,EAAC,CAAC;AACjE;AAEA,SAAStB,QAAQ,EAAEY,KAAK,EAAEC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}